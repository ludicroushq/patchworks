{"version":3,"sources":["../../src/action/index.ts"],"sourcesContent":["import { spawn } from \"node:child_process\";\nimport { existsSync, promises as fs } from \"node:fs\";\nimport { tmpdir } from \"node:os\";\nimport path from \"node:path\";\nimport process from \"node:process\";\n\nexport type CommandResult = {\n  stdout: string;\n  stderr: string;\n  code: number;\n};\n\ntype RunOptions = {\n  allowFailure?: boolean;\n  input?: string;\n};\n\nexport type GitRunner = (\n  args: string[],\n  options?: RunOptions,\n) => Promise<CommandResult>;\n\ntype PatchworksConfig = {\n  commit: string;\n  template: {\n    repository: string;\n    branch?: string;\n  };\n  version?: string;\n  [key: string]: unknown;\n};\n\nlet workspace = process.env.GITHUB_WORKSPACE\n  ? path.resolve(process.env.GITHUB_WORKSPACE)\n  : process.cwd();\nprocess.chdir(workspace);\n\nexport function setWorkspaceForTesting(newWorkspace: string) {\n  workspace = newWorkspace;\n  process.chdir(workspace);\n}\n\nexport async function runCommand(\n  command: string,\n  args: string[],\n  options: RunOptions = {},\n): Promise<CommandResult> {\n  const spawned = spawn(command, args, {\n    cwd: workspace,\n    env: process.env,\n    stdio: [\"pipe\", \"pipe\", \"pipe\"],\n  });\n\n  const stdoutChunks: string[] = [];\n  const stderrChunks: string[] = [];\n\n  spawned.stdout?.setEncoding(\"utf8\");\n  spawned.stderr?.setEncoding(\"utf8\");\n\n  spawned.stdout?.on(\"data\", (data: string) => {\n    stdoutChunks.push(data);\n  });\n\n  spawned.stderr?.on(\"data\", (data: string) => {\n    stderrChunks.push(data);\n  });\n\n  if (options.input) {\n    spawned.stdin?.write(options.input);\n  }\n\n  spawned.stdin?.end();\n\n  return new Promise<CommandResult>((resolve, reject) => {\n    spawned.on(\"error\", (error) => {\n      reject(error);\n    });\n\n    spawned.on(\"close\", (code) => {\n      const result: CommandResult = {\n        stdout: stdoutChunks.join(\"\"),\n        stderr: stderrChunks.join(\"\"),\n        code: code ?? 0,\n      };\n\n      if (result.code !== 0 && !options.allowFailure) {\n        const error = new Error(\n          `Command failed: ${command} ${args.join(\" \")}\\n${result.stderr}`,\n        );\n        (error as Error & { result?: CommandResult }).result = result;\n        reject(error);\n        return;\n      }\n\n      resolve(result);\n    });\n  });\n}\n\nasync function runGit(args: string[], options: RunOptions = {}) {\n  return runCommand(\"git\", args, options);\n}\n\nexport function parseGithubSlug(repositoryUrl: string): string | null {\n  const cleaned = repositoryUrl.replace(/\\.git$/, \"\").replace(/\\/+$/, \"\");\n\n  if (cleaned.startsWith(\"git@github.com:\")) {\n    return cleaned.replace(\"git@github.com:\", \"\");\n  }\n\n  const httpsMatch = cleaned.match(/https:\\/\\/github.com\\/(.+)/i);\n  if (httpsMatch?.[1]) {\n    return httpsMatch[1];\n  }\n\n  return null;\n}\n\nexport function toCommitUrl(\n  repositoryUrl: string,\n  commit: string,\n): string | null {\n  const slug = parseGithubSlug(repositoryUrl);\n  if (!slug) {\n    return null;\n  }\n  return `https://github.com/${slug}/commit/${commit}`;\n}\n\nexport function toCompareUrl(\n  repositoryUrl: string,\n  fromCommit: string,\n  toCommit: string,\n): string | null {\n  const slug = parseGithubSlug(repositoryUrl);\n  if (!slug) {\n    return null;\n  }\n  return `https://github.com/${slug}/compare/${fromCommit}...${toCommit}`;\n}\n\nexport function getRefName(): string {\n  if (process.env.PATCHWORKS_BASE_BRANCH) {\n    return process.env.PATCHWORKS_BASE_BRANCH;\n  }\n\n  if (process.env.GITHUB_REF_NAME) {\n    return process.env.GITHUB_REF_NAME;\n  }\n\n  const ref = process.env.GITHUB_REF;\n  if (ref?.startsWith(\"refs/heads/\")) {\n    return ref.replace(\"refs/heads/\", \"\");\n  }\n\n  return \"main\";\n}\n\nasync function ensureCleanWorkingTree(gitRunner: GitRunner) {\n  const status = await gitRunner([\"status\", \"--porcelain\"]);\n  if (status.stdout.trim().length > 0) {\n    throw new Error(\n      \"Working tree is not clean before running Patchworks update. Please ensure the repository has no pending changes.\",\n    );\n  }\n}\n\nasync function ensureGitIdentity(gitRunner: GitRunner) {\n  const name = process.env.PATCHWORKS_GIT_NAME ?? \"Patchworks\";\n  const email = process.env.PATCHWORKS_GIT_EMAIL ?? \"bot@patchworks.dev\";\n  await gitRunner([\"config\", \"user.name\", name]);\n  await gitRunner([\"config\", \"user.email\", email]);\n}\n\nasync function readConfig(configPath: string): Promise<PatchworksConfig> {\n  if (!existsSync(configPath)) {\n    throw new Error(\n      `.patchworks.json not found at ${configPath}. Cannot continue.`,\n    );\n  }\n\n  const raw = await fs.readFile(configPath, \"utf8\");\n  try {\n    const parsed = JSON.parse(raw) as PatchworksConfig;\n    if (!parsed.commit || typeof parsed.commit !== \"string\") {\n      throw new Error(\"Missing commit in patchworks config\");\n    }\n    if (!parsed.template?.repository) {\n      throw new Error(\"Missing template.repository in patchworks config\");\n    }\n    return parsed;\n  } catch (error) {\n    throw new Error(\n      `Unable to parse .patchworks.json. Ensure it is valid JSON. ${(error as Error).message}`,\n    );\n  }\n}\n\nasync function fetchTemplate(\n  gitRunner: GitRunner,\n  remoteName: string,\n  repository: string,\n  branch: string,\n) {\n  await gitRunner([\"remote\", \"remove\", remoteName], { allowFailure: true });\n  await gitRunner([\"remote\", \"add\", remoteName, repository]);\n  await gitRunner([\n    \"fetch\",\n    \"--no-tags\",\n    \"--force\",\n    \"--prune\",\n    remoteName,\n    branch,\n  ]);\n}\n\nasync function getTemplateCommits(\n  gitRunner: GitRunner,\n  remoteName: string,\n  branch: string,\n): Promise<string[]> {\n  const revList = await gitRunner([\"rev-list\", `${remoteName}/${branch}`]);\n  return revList.stdout\n    .split(\"\\n\")\n    .map((line) => line.trim())\n    .filter((line) => line.length > 0);\n}\n\nasync function getCommitSubject(\n  gitRunner: GitRunner,\n  commit: string,\n): Promise<string> {\n  const subject = await gitRunner([\n    \"show\",\n    \"--no-patch\",\n    \"--pretty=format:%s\",\n    commit,\n  ]);\n  return subject.stdout.trim();\n}\n\nexport async function applyPatchSafely(\n  patchFile: string,\n  gitRunner: GitRunner,\n) {\n  const strategies: string[][] = [\n    [\"--reject\", \"--whitespace=nowarn\", patchFile],\n    [\"--reject\", \"--whitespace=fix\", patchFile],\n    [\"--reject\", \"--ignore-space-change\", \"--whitespace=nowarn\", patchFile],\n    [\"--reject\", \"--ignore-whitespace\", \"--whitespace=nowarn\", patchFile],\n  ];\n\n  for (const args of strategies) {\n    const result = await gitRunner([\"apply\", ...args], { allowFailure: true });\n    if (result.code === 0) {\n      return;\n    }\n\n    const status = await gitRunner([\"status\", \"--porcelain\"]);\n    if (status.stdout.trim().length > 0) {\n      console.log(\n        \"Patch applied with warnings. Some hunks may have been rejected (see .rej files if present).\",\n      );\n      return;\n    }\n  }\n\n  throw new Error(\n    \"Failed to apply template diff. Manual intervention required.\",\n  );\n}\n\nexport type CreatePullRequest = (\n  token: string,\n  owner: string,\n  repo: string,\n  title: string,\n  head: string,\n  base: string,\n  body: string,\n) => Promise<void>;\n\nasync function createPullRequest(\n  token: string,\n  owner: string,\n  repo: string,\n  title: string,\n  head: string,\n  base: string,\n  body: string,\n) {\n  const response = await fetch(\n    `https://api.github.com/repos/${owner}/${repo}/pulls`,\n    {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/vnd.github+json\",\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"patchworks-action\",\n      },\n      body: JSON.stringify({\n        title,\n        head,\n        base,\n        body,\n      }),\n    },\n  );\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(\n      `Failed to create pull request (${response.status}): ${errorText}`,\n    );\n  }\n\n  const pr = (await response.json()) as { number: number; html_url: string };\n  console.log(`Created PR #${pr.number}: ${pr.html_url}`);\n}\n\nexport type CheckExistingPullRequest = (\n  token: string,\n  owner: string,\n  repo: string,\n  head: string,\n) => Promise<boolean>;\n\nasync function checkExistingPullRequest(\n  token: string,\n  owner: string,\n  repo: string,\n  head: string,\n): Promise<boolean> {\n  const response = await fetch(\n    `https://api.github.com/repos/${owner}/${repo}/pulls?state=open&head=${owner}:${head}`,\n    {\n      headers: {\n        Accept: \"application/vnd.github+json\",\n        Authorization: `Bearer ${token}`,\n        \"User-Agent\": \"patchworks-action\",\n      },\n    },\n  );\n\n  if (!response.ok) {\n    const errorText = await response.text();\n    throw new Error(\n      `Failed to check for existing pull requests (${response.status}): ${errorText}`,\n    );\n  }\n\n  const prs = (await response.json()) as Array<{ number: number }>;\n  const existing = prs[0];\n  if (existing) {\n    console.log(\n      `Found existing Patchworks update PR (#${existing.number}). Exiting without changes.`,\n    );\n    return true;\n  }\n\n  return false;\n}\n\nexport type BuildPullRequestBodyInput = {\n  templateRepo: string;\n  templateBranch: string;\n  currentCommit: string;\n  nextCommit: string;\n  commitSubject: string;\n  compareUrl?: string | null;\n  commitUrl?: string | null;\n  rejectFiles: string[];\n};\n\nexport function buildPullRequestBody(input: BuildPullRequestBodyInput): string {\n  const {\n    templateRepo,\n    templateBranch,\n    currentCommit,\n    nextCommit,\n    commitSubject,\n    compareUrl,\n    commitUrl,\n    rejectFiles,\n  } = input;\n\n  const lines: string[] = [];\n  lines.push(\"## Summary\");\n  lines.push(`- Template: ${templateRepo} (branch \"${templateBranch}\")`);\n  lines.push(`- Previous commit: ${currentCommit}`);\n  lines.push(`- New commit: ${nextCommit}`);\n  lines.push(`- Template message: ${commitSubject || \"(no subject)\"}`);\n  if (compareUrl) {\n    lines.push(`- Diff: ${compareUrl}`);\n  } else if (commitUrl) {\n    lines.push(`- Commit: ${commitUrl}`);\n  }\n\n  lines.push(\"\\n## Rejects\");\n  if (rejectFiles.length === 0) {\n    lines.push(\"- None\");\n  } else {\n    for (const file of rejectFiles) {\n      lines.push(`- \\`${file}\\``);\n    }\n  }\n\n  return lines.join(\"\\n\");\n}\n\ntype PatchworksDependencies = {\n  gitRunner: GitRunner;\n  createPullRequest: CreatePullRequest;\n  checkExistingPullRequest: CheckExistingPullRequest;\n};\n\nconst defaultDependencies: PatchworksDependencies = {\n  gitRunner: runGit,\n  createPullRequest,\n  checkExistingPullRequest,\n};\n\nexport async function runPatchworksUpdate(\n  overrides: Partial<PatchworksDependencies> = {},\n) {\n  const { gitRunner, createPullRequest, checkExistingPullRequest } = {\n    ...defaultDependencies,\n    ...overrides,\n  };\n\n  console.log(`Running Patchworks update from ${workspace}`);\n\n  const configPath = path.join(workspace, \".patchworks.json\");\n  const config = await readConfig(configPath);\n\n  const templateBranch = config.template.branch ?? \"main\";\n  const templateRepo = config.template.repository;\n  const currentTemplateCommit = config.commit;\n\n  const baseBranch = getRefName();\n  console.log(`Using base branch ${baseBranch}`);\n\n  const githubRepo = process.env.GITHUB_REPOSITORY;\n  if (!githubRepo) {\n    throw new Error(\"GITHUB_REPOSITORY is not set in the environment\");\n  }\n\n  const [owner, repo] = githubRepo.split(\"/\");\n  if (!owner || !repo) {\n    throw new Error(`Unable to parse owner/repo from ${githubRepo}`);\n  }\n\n  const token = process.env.GITHUB_TOKEN || process.env.GH_TOKEN;\n  if (!token) {\n    throw new Error(\n      \"GITHUB_TOKEN (or GH_TOKEN) is required to create pull requests\",\n    );\n  }\n\n  const updateBranch =\n    process.env.PATCHWORKS_BRANCH_NAME ?? \"patchworks/update\";\n\n  const hasExistingPR = await checkExistingPullRequest(\n    token,\n    owner,\n    repo,\n    updateBranch,\n  );\n\n  if (hasExistingPR) {\n    return;\n  }\n\n  await ensureCleanWorkingTree(gitRunner);\n  await ensureGitIdentity(gitRunner);\n\n  await gitRunner([\"fetch\", \"origin\", baseBranch]);\n  await gitRunner([\"checkout\", baseBranch]);\n  await gitRunner([\"pull\", \"--ff-only\", \"origin\", baseBranch]);\n\n  await fetchTemplate(\n    gitRunner,\n    \"patchworks-template\",\n    templateRepo,\n    templateBranch,\n  );\n\n  const templateCommits = await getTemplateCommits(\n    gitRunner,\n    \"patchworks-template\",\n    templateBranch,\n  );\n\n  if (templateCommits.length === 0) {\n    console.log(\"No commits found on template branch. Nothing to do.\");\n    return;\n  }\n\n  const indexOfCurrent = templateCommits.indexOf(currentTemplateCommit);\n\n  if (indexOfCurrent === -1) {\n    throw new Error(\n      `Current template commit ${currentTemplateCommit} not found on branch ${templateBranch}. Template history may have been rewritten.`,\n    );\n  }\n\n  if (indexOfCurrent === 0) {\n    console.log(\"Repository already matches the latest template commit.\");\n    return;\n  }\n\n  const nextTemplateCommit = templateCommits[indexOfCurrent - 1];\n  if (!nextTemplateCommit) {\n    throw new Error(\n      `Unable to determine the next template commit after ${currentTemplateCommit}.`,\n    );\n  }\n  const shortNext = nextTemplateCommit.substring(0, 7);\n  const shortCurrent = currentTemplateCommit.substring(0, 7);\n\n  console.log(\n    `Preparing update for template commit ${shortCurrent} -> ${shortNext}`,\n  );\n\n  await gitRunner([\"checkout\", \"-B\", updateBranch, baseBranch]);\n\n  const diffResult = await gitRunner([\n    \"diff\",\n    \"--binary\",\n    \"--find-renames\",\n    `${currentTemplateCommit}`,\n    `${nextTemplateCommit}`,\n  ]);\n\n  const diffContent = diffResult.stdout;\n\n  if (diffContent.trim().length === 0) {\n    console.log(\n      \"Template diff is empty. Repository already matches template changes.\",\n    );\n  } else {\n    const tempDir = await fs.mkdtemp(path.join(tmpdir(), \"patchworks-\"));\n    const patchFile = path.join(tempDir, `${nextTemplateCommit}.patch`);\n    await fs.writeFile(patchFile, diffContent, \"utf8\");\n    await applyPatchSafely(patchFile, gitRunner);\n    await fs.rm(patchFile, { force: true });\n    await fs.rm(tempDir, { recursive: true, force: true });\n  }\n\n  // Update patchworks config\n  const updatedConfig: PatchworksConfig = {\n    ...config,\n    commit: nextTemplateCommit,\n  };\n  await fs.writeFile(\n    configPath,\n    `${JSON.stringify(updatedConfig, null, 2)}\\n`,\n    \"utf8\",\n  );\n\n  await gitRunner([\"add\", \"-A\"]);\n\n  const staged = await gitRunner([\"diff\", \"--name-only\", \"--cached\"]);\n  if (staged.stdout.trim().length === 0) {\n    console.log(\n      \"No changes to commit after applying template update. Exiting.\",\n    );\n    return;\n  }\n\n  const stagedFiles = staged.stdout\n    .split(\"\\n\")\n    .map((line) => line.trim())\n    .filter((line) => line.length > 0);\n\n  const rejectFiles = stagedFiles.filter((file) => file.endsWith(\".rej\"));\n\n  const commitMessage = `Patchworks: sync ${shortCurrent} -> ${shortNext}`;\n  await gitRunner([\"commit\", \"-m\", commitMessage]);\n\n  await gitRunner([\"push\", \"--force-with-lease\", \"origin\", updateBranch]);\n\n  const commitSubject = await getCommitSubject(gitRunner, nextTemplateCommit);\n  const commitUrl = toCommitUrl(templateRepo, nextTemplateCommit);\n  const compareUrl = toCompareUrl(\n    templateRepo,\n    currentTemplateCommit,\n    nextTemplateCommit,\n  );\n\n  const prTitle = `Patchworks update: ${shortNext}`;\n  const prBody = buildPullRequestBody({\n    templateRepo,\n    templateBranch,\n    currentCommit: currentTemplateCommit,\n    nextCommit: nextTemplateCommit,\n    commitSubject,\n    compareUrl,\n    commitUrl,\n    rejectFiles,\n  });\n\n  await createPullRequest(\n    token,\n    owner,\n    repo,\n    prTitle,\n    updateBranch,\n    baseBranch,\n    prBody,\n  );\n\n  console.log(\"Patchworks update completed successfully.\");\n}\n\nconst isTestEnvironment =\n  process.env.VITEST === \"true\" || process.env.NODE_ENV === \"test\";\n\nif (!isTestEnvironment) {\n  runPatchworksUpdate().catch((error) => {\n    console.error(error instanceof Error ? error.message : String(error));\n    if (error instanceof Error && \"stack\" in error) {\n      console.error(error.stack);\n    }\n    process.exit(1);\n  });\n}\n"],"mappings":"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","names":["process","path","fs","createPullRequest","checkExistingPullRequest"]}